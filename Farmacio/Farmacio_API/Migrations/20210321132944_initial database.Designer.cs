// <auto-generated />
using System;
using Farmacio_Repositories.Implementation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Farmacio_API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210321132944_initial database")]
    partial class initialdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Farmacio_Models.Domain.AbsenceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Answer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RequesterId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("RequesterId");

                    b.ToTable("AbsenceRequest");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("ShouldChangePassword")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Lat")
                        .HasColumnType("float");

                    b.Property<float>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StreetName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MedicalStaffId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("ReportId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Complaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAboutPharmacy")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("WriterId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WriterId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.ComplaintAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ComplaintId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("WriterId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("WriterId");

                    b.ToTable("ComplaintAnswer");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.DermatologistWorkPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DermatologistId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("WorkTimeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DermatologistId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("WorkTimeId");

                    b.ToTable("DermatologistWorkPlace");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.ERecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IssuingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UniqueId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ERecipes");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.ERecipeMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ERecipeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ERecipeId");

                    b.HasIndex("MedicineId");

                    b.ToTable("ERecipeMedicine");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MedicalStaffId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.LoyaltyPoints", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ConsultationPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExaminationPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LoyaltyPoints");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.LoyaltyProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("MinPoints")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LoyaltyProgram");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("AverageGrade")
                        .HasColumnType("int");

                    b.Property<string>("Contraindications")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Form")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecipeOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RecommendedDose")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UniqueId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TypeId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.MedicineIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("char(36)");

                    b.Property<float>("MassInMilligramms")
                        .HasColumnType("float");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineIngredient");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.MedicinePoints", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LoyaltyPointsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyPointsId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicinePoints");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.MedicinePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PharmacyPriceListId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacyPriceListId");

                    b.ToTable("MedicinePrice");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.MedicineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("MedicineType");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.OrderedMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PharmacyOrderId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacyOrderId");

                    b.ToTable("OrderedMedicine");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Pharmacy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<int>("AverageGrade")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PriceListId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PriceListId");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.PharmacyOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("OffersDeadline")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PharmacyAdminId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyAdminId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyOrder");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.PharmacyPriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("ConsultationPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("ExaminationPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("PharmacyPriceList");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TherapyDurationInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PickupDeadline")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UniqueId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.ReservedMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservedMedicine");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.SupplierOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeliveryDeadline")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PharmacyOrderId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("char(36)");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierOffer");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.WorkTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("WorkTime");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.MedicalStaff", b =>
                {
                    b.HasBaseType("Farmacio_Models.Domain.User");

                    b.Property<int>("AverageGrade")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MedicalStaff");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Patient", b =>
                {
                    b.HasBaseType("Farmacio_Models.Domain.User");

                    b.Property<Guid?>("LoyaltyProgramId")
                        .HasColumnType("char(36)");

                    b.Property<int>("NegativePoints")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasIndex("LoyaltyProgramId");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.PharmacyAdmin", b =>
                {
                    b.HasBaseType("Farmacio_Models.Domain.User");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnName("PharmacyAdmin_PharmacyId")
                        .HasColumnType("char(36)");

                    b.HasIndex("PharmacyId");

                    b.HasDiscriminator().HasValue("PharmacyAdmin");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Supplier", b =>
                {
                    b.HasBaseType("Farmacio_Models.Domain.User");

                    b.HasDiscriminator().HasValue("Supplier");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.SystemAdmin", b =>
                {
                    b.HasBaseType("Farmacio_Models.Domain.User");

                    b.HasDiscriminator().HasValue("SystemAdmin");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Dermatologist", b =>
                {
                    b.HasBaseType("Farmacio_Models.Domain.MedicalStaff");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnType("char(36)");

                    b.HasIndex("PharmacyId");

                    b.HasDiscriminator().HasValue("Dermatologist");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Pharmacist", b =>
                {
                    b.HasBaseType("Farmacio_Models.Domain.MedicalStaff");

                    b.Property<Guid?>("PharmacyId")
                        .HasColumnName("Pharmacist_PharmacyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("WorkTimeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("WorkTimeId");

                    b.HasDiscriminator().HasValue("Pharmacist");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.AbsenceRequest", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");

                    b.HasOne("Farmacio_Models.Domain.MedicalStaff", "Requester")
                        .WithMany("AbsenceRequests")
                        .HasForeignKey("RequesterId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Account", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Appointment", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.MedicalStaff", "MedicalStaff")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicalStaffId");

                    b.HasOne("Farmacio_Models.Domain.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("Farmacio_Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");

                    b.HasOne("Farmacio_Models.Domain.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Complaint", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Patient", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.ComplaintAnswer", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Complaint", "Complaint")
                        .WithMany("Answers")
                        .HasForeignKey("ComplaintId");

                    b.HasOne("Farmacio_Models.Domain.SystemAdmin", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.DermatologistWorkPlace", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Dermatologist", null)
                        .WithMany("WorkPlaces")
                        .HasForeignKey("DermatologistId");

                    b.HasOne("Farmacio_Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");

                    b.HasOne("Farmacio_Models.Domain.WorkTime", "WorkTime")
                        .WithMany()
                        .HasForeignKey("WorkTimeId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.ERecipe", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.ERecipeMedicine", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.ERecipe", null)
                        .WithMany("Medicines")
                        .HasForeignKey("ERecipeId");

                    b.HasOne("Farmacio_Models.Domain.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Grade", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.MedicalStaff", null)
                        .WithMany("Grades")
                        .HasForeignKey("MedicalStaffId");

                    b.HasOne("Farmacio_Models.Domain.Medicine", null)
                        .WithMany("Grades")
                        .HasForeignKey("MedicineId");

                    b.HasOne("Farmacio_Models.Domain.Pharmacy", null)
                        .WithMany("Grades")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Ingredient", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Medicine", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Medicine", null)
                        .WithMany("Replacements")
                        .HasForeignKey("MedicineId");

                    b.HasOne("Farmacio_Models.Domain.MedicineType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.MedicineIngredient", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId");

                    b.HasOne("Farmacio_Models.Domain.Medicine", null)
                        .WithMany("MedicineIngredients")
                        .HasForeignKey("MedicineId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.MedicinePoints", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.LoyaltyPoints", null)
                        .WithMany("MedicinePointsList")
                        .HasForeignKey("LoyaltyPointsId");

                    b.HasOne("Farmacio_Models.Domain.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.MedicinePrice", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("Farmacio_Models.Domain.PharmacyPriceList", null)
                        .WithMany("MedicinePriceList")
                        .HasForeignKey("PharmacyPriceListId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.OrderedMedicine", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("Farmacio_Models.Domain.PharmacyOrder", null)
                        .WithMany("OrderedMedicines")
                        .HasForeignKey("PharmacyOrderId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Pharmacy", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Farmacio_Models.Domain.Patient", null)
                        .WithMany("FollowedPharmacies")
                        .HasForeignKey("PatientId");

                    b.HasOne("Farmacio_Models.Domain.PharmacyPriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.PharmacyOrder", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.PharmacyAdmin", "PharmacyAdmin")
                        .WithMany()
                        .HasForeignKey("PharmacyAdminId");

                    b.HasOne("Farmacio_Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany("Orders")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Promotion", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany("Promotions")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Report", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.ERecipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Reservation", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Farmacio_Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.ReservedMedicine", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("Farmacio_Models.Domain.Reservation", null)
                        .WithMany("Medicines")
                        .HasForeignKey("ReservationId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.SupplierOffer", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.PharmacyOrder", "PharmacyOrder")
                        .WithMany()
                        .HasForeignKey("PharmacyOrderId");

                    b.HasOne("Farmacio_Models.Domain.Supplier", "Supplier")
                        .WithMany("Offers")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.User", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Patient", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.LoyaltyProgram", "LoyaltyProgram")
                        .WithMany()
                        .HasForeignKey("LoyaltyProgramId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.PharmacyAdmin", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Dermatologist", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Pharmacy", null)
                        .WithMany("Dermatologists")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Farmacio_Models.Domain.Pharmacist", b =>
                {
                    b.HasOne("Farmacio_Models.Domain.Pharmacy", "Pharmacy")
                        .WithMany("Pharmacists")
                        .HasForeignKey("PharmacyId");

                    b.HasOne("Farmacio_Models.Domain.WorkTime", "WorkTime")
                        .WithMany()
                        .HasForeignKey("WorkTimeId");
                });
#pragma warning restore 612, 618
        }
    }
}
